"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalarTypeValue = void 0;
var ScalarTypeValue;
(function (ScalarTypeValue) {
    ScalarTypeValue[ScalarTypeValue["DOUBLE"] = 1] = "DOUBLE";
    ScalarTypeValue[ScalarTypeValue["FLOAT"] = 2] = "FLOAT";
    ScalarTypeValue[ScalarTypeValue["INT64"] = 3] = "INT64";
    ScalarTypeValue[ScalarTypeValue["UINT64"] = 4] = "UINT64";
    ScalarTypeValue[ScalarTypeValue["INT32"] = 5] = "INT32";
    ScalarTypeValue[ScalarTypeValue["FIXED64"] = 6] = "FIXED64";
    ScalarTypeValue[ScalarTypeValue["FIXED32"] = 7] = "FIXED32";
    ScalarTypeValue[ScalarTypeValue["BOOL"] = 8] = "BOOL";
    ScalarTypeValue[ScalarTypeValue["STRING"] = 9] = "STRING";
    ScalarTypeValue[ScalarTypeValue["BYTES"] = 12] = "BYTES";
    ScalarTypeValue[ScalarTypeValue["UINT32"] = 13] = "UINT32";
    ScalarTypeValue[ScalarTypeValue["SFIXED32"] = 15] = "SFIXED32";
    ScalarTypeValue[ScalarTypeValue["SFIXED64"] = 16] = "SFIXED64";
    ScalarTypeValue[ScalarTypeValue["SINT32"] = 17] = "SINT32";
    ScalarTypeValue[ScalarTypeValue["SINT64"] = 18] = "SINT64";
})(ScalarTypeValue || (exports.ScalarTypeValue = ScalarTypeValue = {}));
//# sourceMappingURL=data:application/json;base64,