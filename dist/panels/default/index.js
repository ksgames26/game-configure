"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const vue_1 = require("vue");
const package_json_1 = __importDefault(require("../../../package.json"));
const parser_1 = require("../../compiler/parser");
let path = Editor.Package.getPath(package_json_1.default.name);
let file = (0, path_1.join)(path, "config.json");
if (!(0, fs_1.existsSync)(file)) {
    (0, fs_1.writeFileSync)(file, JSON.stringify({
        xlsxPath: "",
        exportDirector: "",
        exportTSDirector: "",
        modFile: "",
        globalModuleName: "IGameFramework", // 默认的模块名
        globalModuleTSName: "ksgames26", // 默认的文件名称
        globalModuleInterfaceName: "ITableConf" // 默认的接口名
    }));
}
const save = function (xlsxPath, exportDirector, exportTSDirector, modFile, globalModuleName, globalModuleTSName, globalModuleInterfaceName) {
    (0, fs_1.writeFileSync)(file, JSON.stringify({
        xlsxPath: xlsxPath,
        exportDirector: exportDirector,
        exportTSDirector: exportTSDirector,
        modFile: modFile,
        globalModuleName: globalModuleName,
        globalModuleTSName: globalModuleTSName,
        globalModuleInterfaceName: globalModuleInterfaceName,
    }));
};
const panelDataMap = new WeakMap();
/**
 * @zh 如果希望兼容 3.3 之前的版本可以使用下方的代码
 * @en You can add the code below if you want compatibility with versions prior to 3.3
 */
// Editor.Panel.define = Editor.Panel.define || function(options: any) { return options }
module.exports = Editor.Panel.define({
    listeners: {
        show() { console.log('show'); },
        hide() { console.log('hide'); },
    },
    template: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/template/default/index.html'), 'utf-8'),
    style: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/style/default/index.css'), 'utf-8'),
    $: {
        app: '#app',
    },
    methods: {},
    ready() {
        if (this.$.app) {
            const app = (0, vue_1.createApp)({});
            app.config.compilerOptions.isCustomElement = (tag) => tag.startsWith('ui-');
            app.component('MyCounter', {
                template: (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, '../../../static/template/vue/counter.html'), 'utf-8'),
                data() {
                    var data = JSON.parse((0, fs_extra_1.readFileSync)(file, { encoding: "utf-8" }));
                    return {
                        xlsxPath: data.xlsxPath,
                        exportDirector: data.exportDirector,
                        exportTSDirector: data.exportTSDirector,
                        modFile: data.modFile,
                        globalModuleName: data.globalModuleName,
                        globalModuleTSName: data.globalModuleTSName,
                        globalModuleInterfaceName: data.globalModuleInterfaceName,
                        count: 0,
                        posts: []
                    };
                },
                methods: {
                    onSetXlsxPath(director) {
                        this.xlsxPath = director;
                        this.save();
                    },
                    onSetExportDirector(director) {
                        this.exportDirector = director;
                        this.save();
                    },
                    onSetExportTSDirector(director) {
                        this.exportTSDirector = director;
                        this.save();
                    },
                    onSetGlobalModuleName(name) {
                        this.globalModuleName = name;
                        this.save();
                    },
                    onSetGlobalModuleTSName(name) {
                        this.globalModuleTSName = name;
                        this.save();
                    },
                    onSetGlobalModuleInterfaceName(name) {
                        this.globalModuleInterfaceName = name;
                        this.save();
                    },
                    onSetModFile(file) {
                        this.modFile = file;
                        this.save();
                    },
                    save() {
                        save(this.xlsxPath, this.exportDirector, this.exportTSDirector, this.modFile, this.globalModuleName, this.globalModuleTSName, this.globalModuleInterfaceName);
                    },
                    async onParser() {
                        this.posts.length = 0;
                        this.count = 0;
                        if (!this.modFile)
                            this.modFile = "client";
                        if (this.xlsxPath && this.exportDirector && this.exportTSDirector && this.modFile) {
                            const options = new parser_1.ParserOptions(this.xlsxPath, this.exportDirector, this.exportTSDirector, this.modFile, this.globalModuleName, this.globalModuleTSName, this.globalModuleInterfaceName);
                            const parser = new parser_1.Parser(options);
                            await parser.execute((data) => {
                                data.forEach(e => {
                                    this.posts.push(e);
                                });
                            }, (name, success) => {
                                let find = this.posts.find((e) => e.id == name);
                                if (find) {
                                    find.value = success;
                                }
                            }, progress => {
                                this.count = progress;
                            });
                            await Editor.Message.request("asset-db", "refresh-asset", "db://assets");
                        }
                        else {
                            await Editor.Dialog.info("配置文件不能为空");
                        }
                    }
                },
            });
            app.mount(this.$.app);
            panelDataMap.set(this, app);
        }
    },
    beforeClose() { },
    close() {
        const app = panelDataMap.get(this);
        if (app) {
            app.unmount();
        }
    },
});
//# sourceMappingURL=data:application/json;base64,